/*****************************************************************************/
/*                NCUP -- Shanghai Huateng Software System Inc.              */
/*****************************************************************************/
/* PROGRAM NAME: DbsOprInf.pc                                            */
/* DESCRIPTIONS:                                                             */
/*****************************************************************************/
/*                             MODIFICATION LOG                              */
/* DATE        PROGRAMMER     DESCRIPTION                                    */
/*                                                                           */
/*****************************************************************************/

#include <stdlib.h>
#include <string.h>
#include "DbsDef.h"
#include "batch.h"

extern    char    gLogFile[LOG_NAME_LEN_MAX];

EXEC SQL include sqlca;
EXEC SQL include sqlda;

EXEC SQL BEGIN DECLARE SECTION;
struct ht_tbl_err_flow_tab
{
char inter_brh_code	[10 + 1];
char      sett_date	[8 + 1];
char    trans_date	[8 + 1];
char    trans_time	[10 + 1];
char    flag_result	[1 + 1];
char    acct_statu  [1 + 1];
char      order_no	[32 + 1];
char      plat_key	[48 + 1];
char      batch_no	[2 + 1];
char        bus_tp	[8 + 1];
char      trans_tp	[4 + 1];
char      acct_type	[2 + 1];
char    trans_state	[1 + 1];
char            pan	[20 + 1];
char            pan1	[20 + 1];
char            ccy	[3 + 1];
char      trans_at	[12 + 1];
char      dest_pan	[20 + 1];
char      dest_ccy	[3 + 1];
char  dest_trans_at	[12 + 1];
char  debt_at	[12 + 1];
char  trans_fee	[12 + 1];
char        reserve	[48 + 1];
}vtbl_err_flow;
static int nTotalNum = 0;
char    sSqlBuf[128];
static int  nReturnCode;
short db_ind;
static int  ptnBeginOffset;
static int  ptnEndOffset;
EXEC SQL END DECLARE SECTION;

int DbsTblErrFlow(int vnOprType, struct ht_tbl_err_flow_tab *ptbl_err_flow, int nBeginOffset, int nEndOffset)
{
    ptnBeginOffset = nBeginOffset;
    ptnEndOffset = nEndOffset;
    memset(&vtbl_err_flow, 0x00, sizeof(vtbl_err_flow));
    memcpy(&vtbl_err_flow, ptbl_err_flow, sizeof(vtbl_err_flow));

    switch(vnOprType)
    {
    case DBS_INSERT:
            memset(sSqlBuf, 0, 128);
            sprintf(sSqlBuf, "select TBL_ERR_FLOW_SEQ_ID_%s.nextval from dual", vtbl_err_flow.inter_brh_code);

            nReturnCode = SelectSequence(sSqlBuf, &nTotalNum);
            if( nReturnCode )
            {
                HtLog (gLogFile, HT_LOG_MODE_ERROR, __FILE__, __LINE__, "select from TBL_ERR_FLOW_SEQ_ID_%s error, sqlcode=[%d].", vtbl_err_flow.inter_brh_code , nReturnCode);
                return sqlca.sqlcode;
            }
        
            EXEC SQL 
                insert into ht_tbl_err_flow(
                    inter_brh_code,
                    sett_date	,
                    trans_date	,
                    trans_time	,
                    flag_result	,
                    order_no	,
                    plat_key	,
                    batch_no	,
                    bus_tp	,
                    trans_tp	,
                    acct_type	,
                    trans_state	,
                    pan	,
                    pan1	,
                    ccy	,
                    trans_at	,
                    dest_pan	,
                    dest_ccy	,
                    dest_trans_at	,
                    debt_at ,
                    trans_fee ,
                    reserve
               ) values (
                    :vtbl_err_flow.inter_brh_code       ,
                    :vtbl_err_flow.sett_date	       ,
                    :vtbl_err_flow.trans_date	       ,
                    :vtbl_err_flow.trans_time	       ,
                    :vtbl_err_flow.flag_result	       ,
                    :vtbl_err_flow.order_no	       ,
                    :vtbl_err_flow.plat_key	       ,
                    :vtbl_err_flow.batch_no	       ,
                    :vtbl_err_flow.bus_tp	       ,
                    :vtbl_err_flow.trans_tp	       ,
                    :vtbl_err_flow.acct_type	       ,
                    :vtbl_err_flow.trans_state	       ,
                    :vtbl_err_flow.pan	       ,
                    :vtbl_err_flow.pan1	       ,
                    :vtbl_err_flow.ccy	       ,
                    :vtbl_err_flow.trans_at	       ,
                    :vtbl_err_flow.dest_pan	       ,
                    :vtbl_err_flow.dest_ccy	       ,
                    :vtbl_err_flow.dest_trans_at	       ,
                    :vtbl_err_flow.debt_at	       ,
                    :vtbl_err_flow.trans_fee	       ,
                    :vtbl_err_flow.reserve	        
             );
           return sqlca.sqlcode;
           
    case DBS_CURSOR:
        EXEC SQL DECLARE tbl_err_flow_cur CURSOR FOR
            SELECT
                inter_brh_code,
                sett_date	,
                trans_date	,
                trans_time	,
                flag_result	,
                order_no	,
                plat_key	,
                batch_no	,
                bus_tp	,
                trans_tp	,
                acct_type	,
                trans_state	,
                pan	,
                pan1	,
                ccy	,
                trans_at	,
                dest_pan	,
                dest_ccy	,
                dest_trans_at	,
                debt_at ,
                trans_fee ,
                reserve	
            FROM
                ht_tbl_err_flow
            WHERE
                sett_date = :vtbl_err_flow.sett_date AND
		flag_result != 'C';
        return sqlca.sqlcode;

    case DBS_OPEN:
        EXEC SQL OPEN
            tbl_err_flow_cur;
        return sqlca.sqlcode;

    case DBS_FETCH:
        EXEC SQL FETCH tbl_err_flow_cur
        INTO
             	:vtbl_err_flow.inter_brh_code       :db_ind,
                :vtbl_err_flow.sett_date	       :db_ind,
                :vtbl_err_flow.trans_date	       :db_ind,
                :vtbl_err_flow.trans_time	       :db_ind,
                :vtbl_err_flow.flag_result	       :db_ind,
                :vtbl_err_flow.order_no	       :db_ind,
                :vtbl_err_flow.plat_key	       :db_ind,
                :vtbl_err_flow.batch_no	       :db_ind,
                :vtbl_err_flow.bus_tp	       :db_ind,
                :vtbl_err_flow.trans_tp	       :db_ind,
                :vtbl_err_flow.acct_type	       :db_ind,
                :vtbl_err_flow.trans_state	       :db_ind,
                :vtbl_err_flow.pan	       :db_ind,
                :vtbl_err_flow.pan1	       :db_ind,
                :vtbl_err_flow.ccy	       :db_ind,
                :vtbl_err_flow.trans_at	       :db_ind,
                :vtbl_err_flow.dest_pan	       :db_ind,
                :vtbl_err_flow.dest_ccy	       :db_ind,
                :vtbl_err_flow.dest_trans_at	       :db_ind,
                :vtbl_err_flow.debt_at	       :db_ind,
                :vtbl_err_flow.trans_fee	       :db_ind,
                :vtbl_err_flow.reserve	 :db_ind
        ;
        memcpy(ptbl_err_flow, &vtbl_err_flow, sizeof(vtbl_err_flow));
        return sqlca.sqlcode;

    case DBS_CLOSE:
        EXEC SQL CLOSE
            tbl_err_flow_cur;
        return sqlca.sqlcode;

   case DBS_DELETE:
        EXEC SQL DELETE FROM
            ht_tbl_err_flow
        WHERE
            inter_brh_code = :vtbl_err_flow.inter_brh_code
            and plat_key = :vtbl_err_flow.plat_key;
        ;

        return sqlca.sqlcode;
    
    case DBS_UPDATE:
       EXEC SQL UPDATE ht_tbl_err_flow  
                    SET FLAG_RESULT = :vtbl_err_flow.flag_result
		WHERE INTER_BRH_CODE = :vtbl_err_flow.inter_brh_code  AND
		      SETT_DATE      = :vtbl_err_flow.sett_date  AND
                      PLAT_KEY       = :vtbl_err_flow.plat_key;
       return sqlca.sqlcode;

        
    default:
        return NO_SWITCH;
    } /* end of switch */
}
