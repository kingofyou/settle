/*****************************************************************************/
/*                NCUP -- Shanghai Huateng Software System Inc.              */
/*****************************************************************************/
/* PROGRAM NAME: DbsOprInf.pc                                            */
/* DESCRIPTIONS:                                                             */
/*****************************************************************************/
/*                             MODIFICATION LOG                              */
/* DATE        PROGRAMMER     DESCRIPTION                                    */
/*                                                                           */
/*****************************************************************************/

#include <stdlib.h>
#include <string.h>
#include "DbsDef.h"
#include "batch.h"

extern    char    gLogFile[LOG_NAME_LEN_MAX];

EXEC SQL include sqlca;
EXEC SQL include sqlda;

EXEC SQL BEGIN DECLARE SECTION;
struct ht_tbl_check_flow_tab
{
char inter_brh_code	 [10 + 1];
char      sett_date	 [8 + 1];
char    trans_date	 [8 + 1];
char    trans_time	 [10 + 1];
char    flag_result	 [1 + 1];
char      order_no	 [32 + 1];
char      plat_key	 [48 + 1];
char      batch_no	 [2 + 1];
char        bus_tp	 [8 + 1];
char      trans_tp	 [4 + 1];
char      acct_type	 [2 + 1];
char    trans_state	 [1 + 1];
char          s_pan	 [19 + 1];
char          s_ccy	 [3 + 1];
char    s_trans_num	 [12 + 1];
char    s_trans_at	 [12 + 1];
char    s_trans_fee	 [12 + 1];
char          d_pan	 [19 + 1];
char          d_ccy	 [3 + 1];
char    d_trans_num	 [12 + 1];
char    d_trans_at	 [12 + 1];
char    d_trans_fee	 [12 + 1];
char        reserve	 [48 + 1];
int seq_num	         ;
}vtbl_check_flow;
static int nTotalNum = 0;
char    sSqlBuf[128];
static int  nReturnCode;
short db_ind;
static int  ptnBeginOffset;
static int  ptnEndOffset;
EXEC SQL END DECLARE SECTION;

int DbsTblCheckFlow(int vnOprType, struct ht_tbl_check_flow_tab *ptbl_check_flow, int nBeginOffset, int nEndOffset)
{
    ptnBeginOffset = nBeginOffset;
    ptnEndOffset = nEndOffset;
    memset(&vtbl_check_flow, 0x00, sizeof(vtbl_check_flow));
    memcpy(&vtbl_check_flow, ptbl_check_flow, sizeof(vtbl_check_flow));

    switch(vnOprType)
    {
    case DBS_INSERT:
            memset(sSqlBuf, 0, 128);
            sprintf(sSqlBuf, "select TBL_CHECK_FLOW_SEQ_ID_%s.nextval from dual", vtbl_check_flow.inter_brh_code);

            nReturnCode = SelectSequence(sSqlBuf, &nTotalNum);
            if( nReturnCode )
            {
                HtLog (gLogFile, HT_LOG_MODE_ERROR, __FILE__, __LINE__, "select from TBL_CHECK_FLOW_SEQ_ID_%s error, sqlcode=[%d].", vtbl_check_flow.inter_brh_code , nReturnCode);
                return sqlca.sqlcode;
            }
        
            EXEC SQL 
                insert into ht_tbl_check_flow(
                    inter_brh_code	,
                    sett_date	,
                    trans_date	,
                    trans_time	,
                    flag_result	,
                    order_no	,
                    plat_key	,
                    batch_no	,
                    bus_tp	,
                    trans_tp	,
                    acct_type	,
                    trans_state	,
                    s_pan	,
                    s_ccy	,
                    s_trans_num	,
                    s_trans_at	,
                    s_trans_fee	,
                    d_pan	,
                    d_ccy	,
                    d_trans_num	,
                    d_trans_at	,
                    d_trans_fee	,
                    reserve	,
                    seq_num	        
               ) values (
                    :vtbl_check_flow.inter_brh_code	,
                    :vtbl_check_flow.sett_date	,
                    :vtbl_check_flow.trans_date	,
                    :vtbl_check_flow.trans_time	,
                    :vtbl_check_flow.flag_result	,
                    :vtbl_check_flow.order_no	,
                    :vtbl_check_flow.plat_key	,
                    :vtbl_check_flow.batch_no	,
                    :vtbl_check_flow.bus_tp	,
                    :vtbl_check_flow.trans_tp	,
                    :vtbl_check_flow.acct_type	,
                    :vtbl_check_flow.trans_state	,
                    :vtbl_check_flow.s_pan	,
                    :vtbl_check_flow.s_ccy	,
                    :vtbl_check_flow.s_trans_num	,
                    :vtbl_check_flow.s_trans_at	,
                    :vtbl_check_flow.s_trans_fee	,
                    :vtbl_check_flow.d_pan	,
                    :vtbl_check_flow.d_ccy	,
                    :vtbl_check_flow.d_trans_num	,
                    :vtbl_check_flow.d_trans_at	,
                    :vtbl_check_flow.d_trans_fee	,
                    :vtbl_check_flow.reserve	,
                    :nTotalNum
             );
           return sqlca.sqlcode;

    case DBS_SELECT1:
            EXEC SQL
                select 
                    NVL(max(seq_num),0)
                into
                    :vtbl_check_flow.seq_num
                from 
                    ht_tbl_check_flow
               where
                    sett_date = :vtbl_check_flow.sett_date
               and  inter_brh_code = :vtbl_check_flow.inter_brh_code;
        HtMemcpy(ptbl_check_flow, &vtbl_check_flow, sizeof(vtbl_check_flow));
        return sqlca.sqlcode;
           
    case DBS_CURSOR:
        EXEC SQL DECLARE tbl_check_flow_cur CURSOR FOR
            SELECT
                    inter_brh_code	,
                    sett_date	,
                    trans_date	,
                    trans_time	,
                    flag_result	,
                    order_no	,
                    plat_key	,
                    batch_no	,
                    bus_tp	,
                    trans_tp	,
                    acct_type	,
                    trans_state	,
                    s_pan	,
                    s_ccy	,
                    s_trans_num	,
                    s_trans_at	,
                    s_trans_fee	,
                    d_pan	,
                    d_ccy	,
                    d_trans_num	,
                    d_trans_at	,
                    d_trans_fee	,
                    reserve	,
                    seq_num	  
            FROM
                ht_tbl_check_flow
            WHERE
                sett_date = :vtbl_check_flow.sett_date and
                inter_brh_code = :vtbl_check_flow.inter_brh_code
                and  seq_num between :ptnBeginOffset and  :ptnEndOffset ;
        return sqlca.sqlcode;

    case DBS_OPEN:
        EXEC SQL OPEN
            tbl_check_flow_cur;
        return sqlca.sqlcode;

    case DBS_FETCH:
        EXEC SQL FETCH tbl_check_flow_cur
        INTO
                    :vtbl_check_flow.inter_brh_code	,
                    :vtbl_check_flow.sett_date	,
                    :vtbl_check_flow.trans_date	,
                    :vtbl_check_flow.trans_time	,
                    :vtbl_check_flow.flag_result	,
                    :vtbl_check_flow.order_no	,
                    :vtbl_check_flow.plat_key	,
                    :vtbl_check_flow.batch_no	,
                    :vtbl_check_flow.bus_tp	,
                    :vtbl_check_flow.trans_tp	,
                    :vtbl_check_flow.acct_type	,
                    :vtbl_check_flow.trans_state	,
                    :vtbl_check_flow.s_pan	,
                    :vtbl_check_flow.s_ccy	,
                    :vtbl_check_flow.s_trans_num	,
                    :vtbl_check_flow.s_trans_at	,
                    :vtbl_check_flow.s_trans_fee	,
                    :vtbl_check_flow.d_pan	,
                    :vtbl_check_flow.d_ccy	,
                    :vtbl_check_flow.d_trans_num	,
                    :vtbl_check_flow.d_trans_at	,
                    :vtbl_check_flow.d_trans_fee	,
                    :vtbl_check_flow.reserve	
        ;
        memcpy(ptbl_check_flow, &vtbl_check_flow, sizeof(vtbl_check_flow));
        return sqlca.sqlcode;

    case DBS_CLOSE:
        EXEC SQL CLOSE
            tbl_check_flow_cur;
        return sqlca.sqlcode;
        
    default:
        return NO_SWITCH;
    } /* end of switch */
}
