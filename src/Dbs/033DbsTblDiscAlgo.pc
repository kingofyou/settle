/*****************************************************************************/
/*                NCUP -- Shanghai Huateng Software System Inc.              */
/*****************************************************************************/
/* PROGRAM NAME: DbsOprInf.pc                                            */
/* DESCRIPTIONS:                                                             */
/*****************************************************************************/
/*                             MODIFICATION LOG                              */
/* DATE        PROGRAMMER     DESCRIPTION                                    */
/*                                                                           */
/*****************************************************************************/

#include <stdlib.h>
#include <string.h>
#include "DbsDef.h"
#include "batch.h"

extern    char    gLogFile[LOG_NAME_LEN_MAX];

EXEC SQL include sqlca;
EXEC SQL include sqlda;

EXEC SQL BEGIN DECLARE SECTION;
struct ht_tbl_disc_algo_tab
{
char disc_id	[5+1 ];
int disc_step	;
double oper_rslt	;
double operand1	;
char operator1	[1+1 ];
double operand2	;
char operator2	[1+1 ];
double operand3	;
char rec_opr_id	[1+1 ];
char rec_upd_opr	[11+1 ];
char rec_crt_ts	[14+1 ];
char rec_upd_ts	[14+1 ];
}vtbl_disc_algo;
static int nTotalNum = 0;
char    sSqlBuf[128];
static int  nReturnCode;
short db_ind;
static int  ptnBeginOffset;
static int  ptnEndOffset;
EXEC SQL END DECLARE SECTION;

int DbsTblDiscAlgo(int vnOprType, struct ht_tbl_disc_algo_tab *ptbl_disc_algo, int nBeginOffset, int nEndOffset)
{
    ptnBeginOffset = nBeginOffset;
    ptnEndOffset = nEndOffset;
    memset(&vtbl_disc_algo, 0x00, sizeof(vtbl_disc_algo));
    memcpy(&vtbl_disc_algo, ptbl_disc_algo, sizeof(vtbl_disc_algo));

    switch(vnOprType)
    {
    case DBS_SELECT:
            EXEC SQL
                select 
                    disc_id	,     
                    disc_step	,   
                    oper_rslt	,   
                    operand1,     
                    operator1	,   
                    operand2,     
                    operator2	,   
                    operand3	,   
                    rec_opr_id	, 
                    rec_upd_opr,  
                    rec_crt_ts	, 
                    rec_upd_ts	  
                into
                    :vtbl_disc_algo.disc_id	,
                    :vtbl_disc_algo.disc_step	,
                    :vtbl_disc_algo.oper_rslt	,
                    :vtbl_disc_algo.operand1,
                    :vtbl_disc_algo.operator1	,
                    :vtbl_disc_algo.operand2,
                    :vtbl_disc_algo.operator2	,
                    :vtbl_disc_algo.operand3	,
                    :vtbl_disc_algo.rec_opr_id	,
                    :vtbl_disc_algo.rec_upd_opr,
                    :vtbl_disc_algo.rec_crt_ts	,
                    :vtbl_disc_algo.rec_upd_ts	
                from 
                    ht_tbl_disc_algo
               where
                    disc_id = :vtbl_disc_algo.disc_id and 
                    disc_step = :vtbl_disc_algo.disc_step
                    ;
        HtMemcpy(ptbl_disc_algo, &vtbl_disc_algo, sizeof(vtbl_disc_algo));
        return sqlca.sqlcode;
           
    case DBS_CURSOR:
        EXEC SQL DECLARE tbl_disc_algo_cur CURSOR FOR
            SELECT
                    disc_id	,     
                    disc_step	,   
                    oper_rslt	,   
                    operand1,     
                    operator1	,   
                    operand2,     
                    operator2	,   
                    operand3	,   
                    rec_opr_id	, 
                    rec_upd_opr,  
                    rec_crt_ts	, 
                    rec_upd_ts	  
            FROM
                ht_tbl_disc_algo
            where
                disc_id = :vtbl_disc_algo.disc_id
            order by disc_step asc;
        return sqlca.sqlcode;

    case DBS_OPEN:
        EXEC SQL OPEN
            tbl_disc_algo_cur;
        return sqlca.sqlcode;

    case DBS_FETCH:
        EXEC SQL FETCH tbl_disc_algo_cur
        INTO
                :vtbl_disc_algo.disc_id	,
                :vtbl_disc_algo.disc_step	,
                :vtbl_disc_algo.oper_rslt	,
                :vtbl_disc_algo.operand1,
                :vtbl_disc_algo.operator1	,
                :vtbl_disc_algo.operand2,
                :vtbl_disc_algo.operator2	,
                :vtbl_disc_algo.operand3	,
                :vtbl_disc_algo.rec_opr_id	,
                :vtbl_disc_algo.rec_upd_opr,
                :vtbl_disc_algo.rec_crt_ts	,
                :vtbl_disc_algo.rec_upd_ts	
        ;
        memcpy(ptbl_disc_algo, &vtbl_disc_algo, sizeof(vtbl_disc_algo));
        return sqlca.sqlcode;

    case DBS_CLOSE:
        EXEC SQL CLOSE
            tbl_disc_algo_cur;
        return sqlca.sqlcode;
        
    default:
        return NO_SWITCH;
    } /* end of switch */
}

